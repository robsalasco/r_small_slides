---
title: "Introducción a R"
subtitle: "🚙💨 crash course mode"
author: "Roberto Salas"
date: "18/07/2018 (actualizado: `r Sys.Date()`)"
output:
  xaringan::moon_reader:
    css: ["default", "metropolis", "metropolis-fonts"]
    lib_dir: libs
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
```


# ¿Qué es R?

- R es un lenguaje para computación estadística y gráficos desarrollado en la Universidad de Auckland por Ross Ihaka y Robert Gentlemany. Su sintaxis es muy similar al lenguaje S de Bell Laboratories permitiendo inclusive correrlo sin modificación en un entorno R.

- R es solo un interprete de comandos al igual que Python, Ruby o Perl, por tanto se puede usar directamente desde una terminal.

- Existen diversas interfaces gráficas que anidan R entre las cuales se cuentan: RStudio, Bioconductor, R Commander, Rattle, RKWard, Deducer, entre otras; sin embargo, la más ampliamente usada y recomendada es RStudio.

- Existen múltiples formas de trabajo de análisis de datos donde existen distintos *approach*: Base R, Tidyverse y data.table. La diferencia entre cada uno rádica en la construcción de la sintaxis y la velocidad de ejecución.

---

# Desventajas de R

.left-column[
![R Inferno](http://www.burns-stat.com/wp-content/uploads/2012/12/R_inferno_cover.jpg)
]

.right-column[
- Desarrollado por estadísticos no programadores
- Problemas en manejo de memoria
- Sintaxis ilegible e inconsistente<sup>*</sup>
- Calidad cuestionable de algunos paquetes
- R es *single threaded* lo que dificulta escalamiento en datasets grandes y el paralelismo en operaciones aritméticas<sup>*</sup>
- Abundancia de hacks
- Necesidad de cargar los dataset completos en memoria
]

.footnote[[*] Hoy existen avances respecto a estos puntos.]

---

# Ventajas de R

.left-column[
```{r, cache=F, echo=F, out.height = "250px"}
knitr::include_graphics("http://r4ds.had.co.nz/cover.png")
```
]

.right-column[
- CRAN es uno de los repositorios más grandes de paquetes
- Implementaciones de nuevas ideas y metodologías generalmente aparecen primero en R
- Extremadamente rápido para el análisis estadístico
- Excelente para prototipado
- Creación de reportes e interfaces avanzadas con R Markdown y Shiny
]

---

class: center

# RStudio

```{r cache=F, echo=F, out.width = "800px", fig.cap="Fuente: http://www.7wdata.be/wp-content/uploads/2016/11/a-complete-tutorial-to-learn-data-science-in-r-from-scratch.png"}
knitr::include_graphics("http://www.7wdata.be/wp-content/uploads/2016/11/a-complete-tutorial-to-learn-data-science-in-r-from-scratch.png")
``` 

---

# Sintaxis básica de R

- `#` representa un comentario dentro del script
- `;` separa comandos (rara vez usado)
- variables no se declaran antes de usarse y pueden ser utilizadas en funciones
- formas de asignar valores a variables
  - `a <- b`
  - `b -> a`
  - `assign("a", b)`
  - `a = b`
- variables globales usando `<<-`
- carga de librerias usando `library()`
- instalación de librerias usando `install.packages()` o GUI
- `::` permite el acceso a funciones dentro de paquetes
- `$` actua sobre *data.frames* permitiendo acceder a contenidos de columnas
- ayuda rápida de comandos `?function_name`
- obtener directorio de trabajo `getwd()` y setear con `setwd()`
- listar variables en el entorno `ls()`, borrar con `rm()` y borrar todo con `rm(list = ls())`

---

# Tipos de datos: Vectores atómicos

### ¿Que son?

Concatenación de elementos en un vector de la forma `a <- c(1,2,3,4,5)` o `1:9` o `seq(2, 3, by=0.5)` o `rep(1:2, times=3)` o `rep(1:2, each=3)`


### Tipos más utilizados

- Logical (TRUE, FALSE, NA)
- Integer (1, 2, 3, 4, 5)
- Double (1.0, 2.0, 3.0, 4.0)
- Character ("a", "b", "c", "d", "e")
- Factor (vector de caracteres con valores fijos)

---

# Tipos de datos: Vectores atómicos

### Funciones sobre vectores

- `sort(x)`
- `order(x)`
- `table(x)`
- `rev(x)`
- `unique(x)`

### Selección de elementos (por posición) en vectores

- `x[4]`
- `x[-4]`
- `x[2:4]`
- `x[-(2:4)]`
- `x[c(1, 5)]`

---

# Tipos de datos: Vectores atómicos

### Selección de elementos (por valor) en vectores

- `x[x == 10]`
- `x[x < 0]`
- `x[x %in% c(1, 2, 5)]`

### Funciones aritméticas

- `max(x)` o `min(x)`
- `log(x)`, `exp(x)` y `sqrt(x)`
- `sum(x)`, `mean(x)`, `median(x)` y `quantile(x)`
- `var(x)`, `sd(x)`
- `round(x, n)`
- `cor(x,y)`
---

# Tipos de datos: Matrices

```{r}
x <- c(3,7,4,2,1,2,3,6,4)
m <- matrix(x, nrow = 3, ncol = 3)
m
```

---

# Tipos de datos: Matrices

### Selección de elementos en una matriz

```{r}
m
```
.pull-left[
### Filas

```{r}
m[2, ]
```
]

.pull-right[
### Columnas

```{r}
m[ ,1]
```
]

---

# Tipos de datos: Matrices

### Operaciones

```{r}
m
```

#### Transpose

```{r}
t(m)
```

---

# Tipos de datos: Matrices

#### Multiplicación

.pull-left[
```{r}
x <- c(7,7,3,4,2,6,3,1,2)
z <- matrix(x, nrow = 3, ncol = 3)
z
```
]

.pull-right[
```{r}
x <- c(1,5,6,7,3,3,1,2,1)
n <- matrix(x, nrow = 3, ncol = 3)
n
```
]

```{r}
z %*% n
```

---

# Tipos de datos: Matrices

#### Resolución de ecuaciones

$$\begin{array} {lcl} 3x+2y & = & 8 \\ x + y& = & 2 \end{array}$$


.pull-left[
```{r}
a <- matrix(c(3,1,2,1),nrow=2,ncol=2)
a
```
]

.pull-right[
```{r}
b <- matrix(c(8,2),nrow=2,ncol=1)
b
```
]

```{r}
solve(a,b)
```

---

# Tipos de datos: Data frames

### Forma básica


```{r}
z <- data.frame(x = 1:3, y = c('a', 'b', 'c'))
z
```

### Información

```{r}
nrow(z)
```

```{r}
ncol(z)
```

---

# Tipos de datos: Data frames

.pull-left[

### Selección filas

```{r}
z[1, ]
```

### Selección columnas

```{r}
z[ ,1]
```

]

.pull-right[

### Filtrado

```{r}

z[z$y=="a", ]

```

```{r}

subset(z, y == "a")

```
  
]

---

# Archivos CSV (Comma separated values)

Los archivos CSV o TSV son bases de datos que se separan sus columnas por medio de comas, punto y comas o cualquier otro caracter. 

En R existen varias formas de manejarlos:

- Base R utiliza el comando *read.csv* o *read.csv2* dentro del paquete *utils*.
- Tidyverse utiliza el comando *read_csv* o *read_csv2* dentro del paquete *readr*.

.pull-left[

### Lectura

```{r}
read.csv2("db/baseex.csv")
```

]

.pull-right[

### Escritura

```
write.csv2(data.frame, "db/baseex.csv")
```

]

---

# Archivos RDS y RData

Los archivos RDS y RData son formatos nativos de R para el guardado de objetos, es decir, un vector se guarda como un vector o un dataframe como dataframe. 


.pull-left[

### Lectura

#### RDS

```
readRDS("db/baseex.rds")
```

#### RData

```
load("db/baseex.RData")
```

]

.pull-right[

### Escritura

#### RDS

```
saveRDS(data.frame, "db/baseex.rds")
```

#### RData

```
save(data.frame, file = "baseex.RData")
```

]

---

# Archivos Excel

Existen múltiples paquetes para el trabajo con archivos excel (*xlsx*, *readxl*, *writexl*, *basictabler*, etc). El que ha adquirido mayor notoriedad es *readxl* porque no posee dependencias externas y además es extremadamente rápido por estar escrito en C y C++. Sin embargo, este software fue dividido y no posee funciones de escritura de archivos por ende se debe usar en conjunto con *writexl*.

.pull-rilef
##
# Lectura

```{r}
library(readxl)
read_excel("db/Libro1.xlsx", sheet = 1, range = "E6:G9")
```
]

.pull-right[
##
# Escritura

```
write_excel(dataframe, "db/Libro1.xlsx")
```
]

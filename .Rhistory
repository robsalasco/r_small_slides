xaringan:::list_css()
xaringan:::inf_mr()
library("knitr", lib.loc="/usr/local/lib/R/3.5/site-library")
tinytex::tlmgr_update()
tinytex::tlmgr_search('beamer.cls')
tinytex::tlmgr_install()
tinytex::tlmgr_install()
tinytex::install_tinytex()
tinytex::install_tinytex(force = TRUE)
tinytex::tlmgr_search('beamer.cls')
library(rgdal)
library(rgdal)
library(osmar)
library(rgeos)
library(raster)
library(maptools)
library(sp)
barrios <- readRDS("/Users/robsalasco/Downloads/output/2017-09-27/merged_bases/Data/barrios_pil.RDS")
shp <- barrios[barrios@data$BARRIO=="Villa Esperanza",]
shp <- spTransform(shp, CRS("+proj=utm +zone=19 +south +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
hexGrid <- function(bb, n, offset, cellsize) {
if (missing(cellsize)) {
if (missing(n))
stop("need either cellsize or n")
area = prod(apply(bb, 1, diff))/n
#		dx = area / (sqrt(3)/2)
#		suggested by Don MacQueen, macq@llnl.gov, Fri Mar 14 16:00:07 CET 2008
dx = sqrt(area)/(sqrt(3)/2)
} else
dx = cellsize
xy = genHexGrid(dx, bb[,1], bb[,2])
#		also suggested by Don MacQueen, macq@llnl.gov, Fri Mar 14 16:00:07 CET 2008:
xy[,1] <- xy[,1] + offset[1] * dx
xy[,2] <- xy[,2] + offset[2] * dx * sqrt(3)/2
attr(xy, "cellsize") = dx
xy
}
genHexGrid <- function(dx, ll = c(0, 0), ur = c(1, 1)) {
dy <- sqrt(3) * dx / 2
x <- seq(ll[1], ur[1] - dx / 2, dx)
y <- seq(ll[2], ur[2], dy)
y <- rep(y, each = length(x))
x <- rep(c(x, x + dx / 2), length.out = length(y))
x <- x + (ur[1] - max(x)) / 2
y <- y + (ur[2] - max(y)) / 2
data.frame(x = x, y = y)
}
genPolyList <- function(hexGrid, dx) {
# EJP; changed:
# how to figure out dx from a grid? THK suggested:
#dx <- hexGrid$x[2] - hexGrid$x[1]
# and the following will also not allways work:
if (missing(dx))
dx = 2 * min(diff(sort(unique(hexGrid$x))))
dy <- dx / sqrt(3)
x.offset <- c(-dx / 2, 0, dx / 2, dx / 2, 0, -dx / 2, -dx / 2)
y.offset <- c(dy / 2, dy, dy / 2, -dy / 2, -dy, -dy / 2, dy / 2)
f <- function(i) list(x = hexGrid$x[i] + x.offset,
y = hexGrid$y[i] + y.offset)
ret = lapply(1:length(hexGrid$x), f)
}
# EJP, added:
HexPoints2SpatialPolygons = function(hex, dx) {
ret = genPolyList(data.frame(coordinates(hex)), dx = dx)
npoly = length(ret)
Srl <- vector(mode="list", length=npoly)
IDS = paste("ID", 1:npoly, sep="")
for (i in 1:npoly)
Srl[[i]] = Polygons(list(Polygon(ret[[i]])), IDS[i])
res <- SpatialPolygons(Srl, proj4string=CRS(proj4string(hex)))
res
}
bb = bbox(shp)
n = 50
offset <- runif(nrow(bb))
xy <- hexGrid(bb,n,offset)
if (!is.na(n) && n == 1 && !is.matrix(xy) && is.vector(xy))
xy <- matrix(xy, ncol=nrow(bb))
sel = xy[,1] >= bb[1,1] & xy[,1] <= bb[1,2] &
xy[,2] >= bb[2,1] & xy[,2] <= bb[2,2]
xy = xy[sel,, drop = FALSE]
rownames(xy) = NULL
sample_points <- SpatialPoints(xy, CRS(proj4string(shp)))
sample_points <- intersect(sample_points, shp)
plot(shp)
plot(HexPoints2SpatialPolygons(sample_points),add=T)
plot(sample_points,add=T)
tinytex::tlmgr_search('fancyhdr.sty')
tlmgr_search("titling.sty")
library(tinytex)
tlmgr_search("titling.sty")
tlmgr_install("titling.sty")
tlmgr_install("fancyhdr")
tlmgr_install("tcolorbox")
tlmgr_install("environ")
tlmgr_install("trimspaces")
tlmgr_install("polyglossia")
tlmgr_install("parskip")
tlmgr_install("libertine")
tlmgr_install("microtype")
xaringan:::inf_mr()
xaringan:::inf_mr()
as.integer(c(4.1, 5.2, 6.3, 6.4))
class(c(4.1, 5.2, 6.3, 6.4))
typeof(c(4.1, 5.2, 6.3, 6.4))
1:9
c(1,1,1,1,3,4,5,4,4,4)
table(c(1,1,1,1,3,4,5,4,4,4))
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4)))
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4))) %>% arrange(Freq)
library(tidyverse)
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4))) %>% arrange(Freq)
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1))) %>% arrange(Freq)
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1))) %>% arrange(desc(Freq))
(as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1))) %>% arrange(desc(Freq)))[1,]
(as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1))) %>% arrange(desc(Freq)))[1,]$Var1
as.numeric((as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1))) %>% arrange(desc(Freq)))[1,]$Var1)
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4)))
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1)))[order(Freq)]
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1)))[order(Freq),]
a <- as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1)))
a[order(Freq),]
a[order(Freq), ]
a[order("Freq"), ]
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1)))[order("Freq"),]
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1)))[order("Freq"),]$Var1
as.data.frame(table(c(1,1,1,1,3,4,5,4,4,4,1)))[order("Freq"),]$Var1
order(c(1,1,1,1,3,4,5,4,4,4,1))
c(1,1,1,1,3,4,5,4,4,4,1)[order(c(1,1,1,1,3,4,5,4,4,4,1))]
sort(c(1,1,1,1,3,4,5,4,4,4,1))
xaringan:::inf_mr()
xaringan:::inf_mr()
run servr::daemon_stop("5062272376")
servr::daemon_stop("5062272376")
xaringan:::inf_mr()
library(devtools)
install_github("Vizzuality/cartodb-r/CartoDB")
install.packages("RJSONIO")
library(devtools)
install_github("Vizzuality/cartodb-r/CartoDB")
install.packages("sergeant")
library(sergeant)
library(tidyverse)
db <- src_drill("localhost")
who_cholera <- tbl(db, "dfs.root.`/Users/robsalasco/CENSO2017/Censo2017_Microdatos_CSV/Microdato_Censo2017-Personas.csvh`")
who_cholera <- tbl(db, "dfs.root.`/Users/robsalasco/CENSO2017/Censo2017_Microdatos_CSV/Microdato_Censo2017-Personas.csvh`")
who_cholera
who_cholera <- tbl(db, "dfs.root.`/Users/robsalasco/CENSO2017/Censo2017_Microdatos_CSV/Microdato_Censo2017-Personas.csvh`(type => 'text',
fieldDelimiter => ';', extractHeader => true)")
who_cholera <- tbl(db, "dfs.root.`/Users/robsalasco/CENSO2017/Censo2017_Microdatos_CSV/Microdato_Censo2017-Personas.csvh`(type => 'text',
fieldDelimiter => ';', extractHeader => true)")
who_cholera <- tbl(db, "dfs.root.`/Users/robsalasco/CENSO2017/Censo2017_Microdatos_CSV/Microdato_Censo2017-Personas.csvh`")
who_cholera <- tbl(db, "dfs.root.`/Users/robsalasco/CENSO2017/Censo2017_Microdatos_CSV/Microdato_Censo2017-Personas.csvf`")
who_cholera
group_by(who_cholera, P10COMUNA) %>%
summarise(avg_annual_cases = mean(P20))
names(who_cholera)
columns(who_cholera)
colnames(who_cholera)
db <- src_drill("localhost")
unlink("/tmp/pqtrans", recursive=TRUE, force=TRUE)
dir.create("/tmp/pqtrans", showWarnings=FALSE)
dbGetQuery(db$con, "
CREATE TABLE dfs.tmp.`/pqtrans/census2017.parquet` AS SELECT * FROM dfs.tmp.`/pqtrans/census2017.csvf`
")
dbGetQuery(db$con, "
CREATE TABLE dfs.tmp.`/pqtrans/census2017.parquet` AS SELECT * FROM dfs.tmp.`/pqtrans/census2017.csvf`
")
census <- tbl(db, "dfs.root.`/Users/robsalasco/census2017.parquet`")
db <- src_drill("localhost")
census <- tbl(db, "dfs.root.`/Users/robsalasco/census2017.parquet`")
census
census %>% filter(P10COMUNA == 13123)
census %>% filter(P10COMUNA == 13123)
census %>% filter(P10COMUNA == 13123)
census %>% filter(P10COMUNA == 13123)
census %>% filter(P10COMUNA == 13123)
install.packages("jpndistrict")
install.packages("sf")
install.packages("sf")
library(rgdal)
install.packages("sf")
install.packages("sf")
install.packages('classInt')
install.packages("sf")
install.packages("rgdal")
install.packages("sf")
install.packages("sf",type="mac.binary")
library(devtools)
install_github("r-spatial/sf")
library("sf", lib.loc="/usr/local/lib/R/3.5/site-library")
detach("package:sf", unload=TRUE)
install.packages("jpndistrict")
jpn_pref(14)
library("jpndistrict", lib.loc="/usr/local/lib/R/3.5/site-library")
jpn_pref(14)
plot(jpn_pref(14))
plot.sf(jpn_pref(14))
plot(jpn_pref(14))
plot(filter(jpn_pref(14), city_code==14101))
filter(jpn_pref(14), city_code==14101)
plot(filter(jpn_pref(14), city_code=="14101"))
filter(jpn_pref(14), city_code=="14101")
jpn_pref(14)["city"])
jpn_pref(14)["city"]
plot(jpn_pref(14)["city"])
install.packages("mapview")
install.packages("satellite")
jpn_pref(14)["city"]
jpn_pref(14)["city"] %>% filter(city == "横浜市 鶴見区")
jpn_pref(14)["city"] %>% filter(city == "横浜市 鶴見区")
library(dplyr)
jpn_pref(14)["city"] %>% filter(city == "横浜市 鶴見区")
plot(jpn_pref(14)["city"] %>% filter(city == "横浜市 鶴見区"))
mapview(jpn_pref(14)["city"] %>% filter(city == "横浜市 鶴見区"))
library(mapview)
install.packages("mapview")
mapview(sf_pref33)
library(mapview)
mapview(jpn_pref(14)["city"] %>% filter(city == "横浜市 鶴見区"))
mapview(jpn_pref(14)["city"])
mapview(jpn_pref(14))
jpn_pref(14)
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA") %>% head(10) %>%  plot()
library(sf)
library(dplyr)
direcciones <- st_read("/Users/robsalasco/Downloads/DIRECCIONES.gdb", layer = "DIR")
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA") %>% head(10) %>%  plot()
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA") %>% select(CALLE) %>% head(10) %>%  plot()
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA") %>% select(CALLE) %>% head(20) %>%  plot()
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA") %>% select(CALLE) %>% head(20)
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA" & CALLE=="LA CONCEPCION") %>% select(CALLE) %>% head(20)
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA" & CALLE=="LA CONCEPCION") %>% select(CALLE)
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA" & CALLE=="LA CONCEPCION") %>% select(CALLE) %>% plot()
direcciones %>% filter(DIRECCIONESNOM_COMUNA == "PROVIDENCIA" & CALLE=="LA CONCEPCION")
db <- src_mysql(
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
install.packages("RMySQL")
devtools::install_github("r-dbi/DBI")
devtools::install_github("r-dbi/RMySQL")
install.packages("RMariaDB")
install.packages("dbplyr")
pool <- (
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
library(dplyr)
library(pool)
pool <- (
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
install.packages("RMySQL")
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
install.packages("RMariaDB")
install.packages("RMariaDB")
install.packages("RMySQL")
install.packages("dbi")
install.packages("DBI")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
library(dplyr)
library(pool)
pool <- dbPool(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
RMariaDB
pool
library(dbplyr)
tbl(con, "flights")
src_tbls(pool)
library(DBI)
pool <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
src_tbls(pool)
dbListTables()
dbListTables(pool)
tbl(con, "Country")
con <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(con)
tbl(con, "Country")
con <- src_mysql(
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(con)
con <- src_mysql(
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(con)
src_tbls(con)
tbl(con, "Country")
library(dplyr)
con <- src_mysql(
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
library(dplyr)
con <- src_mysql(
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
src_tbls(con)
tbl(con, "Country")
my_db <- src_mysql(dbname = "dplyr",
host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
port = 3306,
user = "student",
password = "datacamp")
nycflights <- tbl(my_db, "dplyr")
nycflights
z <- data.frame(x = 1:3, y = c('a', 'b', 'c'))
z
z[z$y=="a", ]
xaringan:::inf_mr()
devtools::install_github("yihui/xaringan")
xaringan:::inf_mr()
data <- read.csv2("db/baseex.csv")
saveRDS("db/baseex.rds")
saveRDS(data, "db/baseex.rds")
xaringan:::inf_mr()
library(readxl)
options(htmltools.dir.version = FALSE)
read_excel("db/Libro1.xlsx", sheet = 1, range = "E6:G9")
library(sf)
library(dplyr)
direcciones <- st_read("/Users/robsalasco/Downloads/DIRECCIONES.gdb", layer = "DIR")
unique(direcciones$DIRECCIONESNOM_COMUNA)
direcciones
unique(direcciones$COMPLEMENTO)
unique(direcciones$DIRECCIONESNOM_COMUNA)
length(unique(direcciones$DIRECCIONESNOM_COMUNA))
direcciones <- st_read("/Users/robsalasco/Downloads/DIRECCIONES-1.gdb", layer = "DIR")
unique(direcciones$DIRECCIONESNOM_COMUNA)
install.packages("swirl")
install.packages("testthat")
install.packages("swirl")
library(swirl)
swirl()
5+7
